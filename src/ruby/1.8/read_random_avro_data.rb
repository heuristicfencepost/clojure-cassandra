require 'rubygems'
require 'avro'

# Basic sanity check to make sure we can ready Avro serialized data generated by Clojure/JVM in Ruby


def read_avro_file filename

  # Define the meta-schema
  meta_schema = Avro::Schema.parse("{\"type\": \"map\", \"values\": \"bytes\"}")

  # Define our IO source
  the_file = File.new(filename)

  # Read the input source and display the schema
  meta_datum_reader = Avro::IO::DatumReader.new(meta_schema)
  meta_val = meta_datum_reader.read(Avro::IO::BinaryDecoder.new(the_file))

  # Build a new reader which can handle the indicated schema
  schema = Avro::Schema.parse(meta_val["schema"])
  datum_reader = Avro::IO::DatumReader.new(schema)
  val = datum_reader.read(Avro::IO::BinaryDecoder.new(StringIO.new(meta_val["data"])))
  puts "Input file #{filename} produced schema #{meta_val["schema"]} and value #{val}"
end

read_avro_file "int.avro"
read_avro_file "float.avro"
read_avro_file "string.avro"
read_avro_file "array.avro"
read_avro_file "map.avro"
